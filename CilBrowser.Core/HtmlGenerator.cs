/* CIL Browser (https://github.com/MSDN-WhiteKnight/CilBrowser)
 * Copyright (c) 2022,  MSDN.WhiteKnight 
 * License: BSD 3-Clause */
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using CilTools.BytecodeAnalysis;
using CilTools.Metadata;
using CilTools.Syntax;

namespace CilBrowser.Core
{
    public static class HtmlGenerator
    {
        static void VisualizeNode(SyntaxNode node, HtmlBuilder target)
        {
            SyntaxNode[] children = node.GetChildNodes();
            HtmlAttribute[] attrs;

            if (children.Length > 0)
            {
                foreach (SyntaxNode child in children) VisualizeNode(child, target);
            }
            else if (node is KeywordSyntax)
            {
                KeywordSyntax ks = (KeywordSyntax)node;

                if (ks.Kind == KeywordKind.DirectiveName)
                {
                    attrs = new HtmlAttribute[1];
                    attrs[0] = new HtmlAttribute("style", "color: magenta;");
                }
                else if (ks.Kind == KeywordKind.Other)
                {
                    attrs = new HtmlAttribute[1];
                    attrs[0] = new HtmlAttribute("style", "color: blue;");
                }
                else attrs = new HtmlAttribute[0];

                target.WriteTag("span", node.ToString(), attrs);
            }
            else if (node is IdentifierSyntax)
            {
                IdentifierSyntax ids = (IdentifierSyntax)node;

                if (ids.IsMemberName)
                {
                    attrs = new HtmlAttribute[1];
                    attrs[0] = new HtmlAttribute("style", "color: rgb(43,145,175);");
                }
                else attrs = new HtmlAttribute[0];

                target.WriteTag("span", node.ToString(), attrs);
            }
            else if (node is LiteralSyntax)
            {
                LiteralSyntax ls = (LiteralSyntax)node;

                if (ls.Value is string)
                {
                    attrs = new HtmlAttribute[1];
                    attrs[0] = new HtmlAttribute("style", "color: red;");
                }
                else attrs = new HtmlAttribute[0];

                target.WriteTag("span", node.ToString(), attrs);
            }
            else if (node is CommentSyntax)
            {
                attrs = new HtmlAttribute[1];
                attrs[0] = new HtmlAttribute("style", "color: green;");
                target.WriteTag("span", node.ToString(), attrs);
            }
            else
            {
                target.WriteEscaped(node.ToString());
            }
        }

        public static string VisualizeSyntaxNodes(IEnumerable<SyntaxNode> nodes, string title)
        {
            StringBuilder sb = new StringBuilder(5000);
            HtmlBuilder html = new HtmlBuilder(sb);
            html.WriteTagStart("html");
            html.WriteTagStart("head");
            html.WriteTag("title", title);
            html.WriteTagEnd("head");

            html.WriteTagStart("body");
            html.WriteTagStart("pre");
            html.WriteTagStart("code");

            foreach (SyntaxNode node in nodes) VisualizeNode(node, html);

            html.WriteTagEnd("code");
            html.WriteTagEnd("pre");

            html.WriteTag("hr", string.Empty);
            html.StartParagraph();
            html.WriteEscaped("Generated by CIL Browser");
            html.EndParagraph();
            html.WriteTagEnd("body");
            html.WriteTagEnd("html");
            return sb.ToString();
        }

        public static string VisualizeMethod(MethodBase mb)
        {
            CilGraph gr = CilGraph.Create(mb);
            SyntaxNode[] nodes = new SyntaxNode[] { gr.ToSyntaxTree() };
            return VisualizeSyntaxNodes(nodes, mb.Name);
        }

        public static string VisualizeType(Type t)
        {
            SyntaxNode[] nodes = SyntaxNode.GetTypeDefSyntax(t, true, new DisassemblerParams()).ToArray();

            if (nodes.Length == 0) return string.Empty;

            if (nodes.Length == 1)
            {
                if (string.IsNullOrWhiteSpace(nodes[0].ToString())) return string.Empty;
            }

            return VisualizeSyntaxNodes(nodes, t.Name);
        }

        public static string VisualizeAssemblyManifest(Assembly ass)
        {
            IEnumerable<SyntaxNode> nodes = Disassembler.GetAssemblyManifestSyntaxNodes(ass);
            return VisualizeSyntaxNodes(nodes, ass.GetName().Name);
        }

        public static void GenerateWebsite(Assembly ass)
        {
            string html = VisualizeAssemblyManifest(ass);
            File.WriteAllText("assembly.html", html);

            Type[] types = ass.GetTypes();

            for (int i = 0; i < types.Length; i++)
            {
                Console.WriteLine(types[i].FullName);
                html = VisualizeType(types[i]);

                if (string.IsNullOrWhiteSpace(html)) continue;

                string fname = ((uint)types[i].MetadataToken).ToString() + ".html";
                File.WriteAllText(fname, html);
            }
        }
    }
}
